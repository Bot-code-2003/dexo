//pthread/concurrent thread execution

#include <stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<unistd.h>
int i;

void * print(void * i){
    int *j=(int*)i;
    printf("I am thread %d\n",*j);
}

int main() {
 
  pthread_t tid[5];
  for(int i=0;i<5;i++){
      pthread_create(&tid[i],NULL,print,(void*)&i);
      sleep(1);
      
  }
  for(int i=0;i<5;i++){
      pthread_join(tid[i],NULL);
  }
  
}



//bankers 



import java.util.*;
class bankersalgo{
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        int np,nr;
        System.out.println("Enter number of processes:");
        np=sc.nextInt();
        System.out.println("Enter number of resources:");
        nr=sc.nextInt();
        int[][] max=new int[np][nr];
        int[][] alloc=new int[np][nr];
        int[] available=new int[nr];
        System.out.println("Enter max matrix");
        for(int i=0;i<np;i++)
        {
            for(int j=0;j<nr;j++)
            {
                max[i][j]=sc.nextInt();
            }
        }
        System.out.println("Enter alloc matrix");
        for(int i=0;i<np;i++)
        {
            for(int j=0;j<nr;j++)
            {
                alloc[i][j]=sc.nextInt();
            }
        }
        System.out.println("Enter available reosurces");
        for(int i=0;i<nr;i++)
        available[i]=sc.nextInt();
        printmat("max",max,np,nr);
        printmat("alloc",alloc,np,nr);
       isSafe(max,alloc,available,np,nr);
    }
public static void printmat(String name,int[][] mat,int n,int m)
{
    System.out.println("The entered "+name+" matrix is:");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            System.out.print(mat[i][j]+" ");
        }System.out.println();
    }
}
public static void cneed(int[][] max,int[][] alloc,int[][] need,int n,int m)
{
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            need[i][j]=max[i][j]-alloc[i][j];
        }
    }
}
public static boolean isSafe(int[][] max,int[][] alloc,int[] available,int np,int nr)
{
    int[][] need=new int[np][nr];
    cneed(max,alloc,need,np,nr);
    boolean[] finish=new boolean[np];
    int[] safesequence=new int[np];
    int count=0;
    while(count<np)
    {
        boolean found=false;
        for(int p=0;p<np;p++)
        {
            if(!finish[p])
            {int j;
                for(j=0;j<nr;j++)
                {
                    if(need[p][j]>available[j])
                    break;
                }
                
                if(j==nr)
                {
                    for(int k=0;k<nr;k++)
                    available[k]+=alloc[p][k];
                    safesequence[count++]=p;
                    finish[p]=true;
                    found=true;
                }
            }
            
        }
        if(!found)
            {
                System.out.println("Tne system is not in safe state");
                return false;}
            
        
    }
        System.out.println("The system is safe...");
        System.out.print("The safe sequence is:");
        for(int i=0;i<np;i++)
        {
            System.out.print("p"+safesequence[i]+"->");
        }
        return true;
}
}


//preemptive priority

import java.util.Scanner;

public class PreemptivePrioritySimple {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input: number of processes
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] at = new int[n]; // Arrival Time
        int[] bt = new int[n]; // Burst Time
        int[] pr = new int[n]; // Priority
        int[] rt = new int[n]; // Remaining Time
        int[] wt = new int[n]; // Waiting Time
        int[] tat = new int[n]; // Turnaround Time
        boolean[] finished = new boolean[n];

        // Get input for each process
        for (int i = 0; i < n; i++) {
            System.out.print("Arrival time of P" + (i + 1) + ": ");
            at[i] = sc.nextInt();
            System.out.print("Burst time of P" + (i + 1) + ": ");
            bt[i] = sc.nextInt();
            System.out.print("Priority of P" + (i + 1) + ": ");
            pr[i] = sc.nextInt();
            rt[i] = bt[i]; // Remaining time = burst time
        }

        int time = 0, completed = 0;

        // Main loop
        while (completed < n) {
            int idx = -1;
            int bestPriority = Integer.MAX_VALUE;

            // Find highest-priority ready process
            for (int i = 0; i < n; i++) {
                if (at[i] <= time && !finished[i] && rt[i] > 0 && pr[i] < bestPriority) {
                    bestPriority = pr[i];
                    idx = i;
                }
            }

            if (idx != -1) {
                rt[idx]--; // Run for 1 unit
                time++;

                if (rt[idx] == 0) {
                    finished[idx] = true;
                    completed++;
                    tat[idx] = time - at[idx];         // Turnaround time
                    wt[idx] = tat[idx] - bt[idx];      // Waiting time
                }
            } else {
                time++; // If no process ready, just wait
            }
        }

        // Print output
        System.out.println("\nProcess\tAT\tBT\tPR\tWT\tTAT");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + pr[i] + "\t" + wt[i] + "\t" + tat[i]);
        }

        // Averages
        float avgWT = 0, avgTAT = 0;
        for (int i = 0; i < n; i++) {
            avgWT += wt[i];
            avgTAT += tat[i];
        }
        System.out.println("\nAverage Waiting Time: " + (avgWT / n));
        System.out.println("Average Turnaround Time: " + (avgTAT / n));
    }
}


//priority


import java.util.*;

public class PriorityScheduling {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];
        int[] bt = new int[n];
        int[] priority = new int[n];
        int[] wt = new int[n];
        int[] tat = new int[n];

        // Input burst time and priority
        for (int i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.print("Enter burst time for P" + pid[i] + ": ");
            bt[i] = sc.nextInt();
            System.out.print("Enter priority for P" + pid[i] + " (lower = higher priority): ");
            priority[i] = sc.nextInt();
        }

        // Sort by priority
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (priority[j] > priority[j + 1]) {
                    // Swap priority
                    int temp = priority[j];
                    priority[j] = priority[j + 1];
                    priority[j + 1] = temp;

                    // Swap burst time
                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;

                    // Swap process ID
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }

        // Calculate waiting time
        wt[0] = 0;
        for (int i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
        }

        // Calculate turnaround time
        for (int i = 0; i < n; i++) {
            tat[i] = wt[i] + bt[i];
        }

        // Print results
        System.out.println("\nProcess\tBurst\tPriority\tWaiting\tTurnaround");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + pid[i] + "\t" + bt[i] + "\t" + priority[i] + "\t\t" + wt[i] + "\t" + tat[i]);
        }

        // Calculate average times
        float avgWT = 0, avgTAT = 0;
        for (int i = 0; i < n; i++) {
            avgWT += wt[i];
            avgTAT += tat[i];
        }

        System.out.println("\nAverage Waiting Time: " + (avgWT / n));
        System.out.println("Average Turnaround Time: " + (avgTAT / n));
    }
}


//roundrobin

import java.util.*;

public class RoundRobinSimple {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Step 1: Get number of processes
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] bt = new int[n]; // Burst time
        int[] rt = new int[n]; // Remaining time
        int[] wt = new int[n]; // Waiting time
        int[] tat = new int[n]; // Turnaround time

        // Step 2: Get burst time for each process
        for (int i = 0; i < n; i++) {
            System.out.print("Enter burst time for Process " + (i + 1) + ": ");
            bt[i] = sc.nextInt();
            rt[i] = bt[i]; // Copy to remaining time
        }

        // Step 3: Get time quantum
        System.out.print("Enter time quantum: ");
        int tq = sc.nextInt();

        int time = 0; // Current time

        // Step 4: Start round robin scheduling
        while (true) {
            boolean allDone = true;

            for (int i = 0; i < n; i++) {
                if (rt[i] > 0) {
                    allDone = false;

                    if (rt[i] > tq) {
                        time += tq;
                        rt[i] -= tq;
                    } else {
                        time += rt[i];
                        wt[i] = time - bt[i];
                        rt[i] = 0;
                    }
                }
            }

            if (allDone)
                break;
        }

        // Step 5: Calculate turnaround time
        for (int i = 0; i < n; i++) {
            tat[i] = bt[i] + wt[i];
        }

        // Step 6: Show output
        System.out.println("\nProcess\tBT\tWT\tTAT");
        float totalWT = 0, totalTAT = 0;
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]);
            totalWT += wt[i];
            totalTAT += tat[i];
        }

        // Step 7: Show averages
        System.out.printf("\nAverage Waiting Time: %.2f\n", totalWT / n);
        System.out.printf("Average Turnaround Time: %.2f\n", totalTAT / n);

        sc.close();
    }
}

//srtf

import java.util.*;

public class SimpleSRTF {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] at = new int[n];  // Arrival Time
        int[] bt = new int[n];  // Burst Time
        int[] rt = new int[n];  // Remaining Time
        int[] wt = new int[n];  // Waiting Time
        int[] tat = new int[n]; // Turnaround Time

        for (int i = 0; i < n; i++) {
            System.out.print("Enter arrival time for P" + (i + 1) + ": ");
            at[i] = sc.nextInt();
            System.out.print("Enter burst time for P" + (i + 1) + ": ");
            bt[i] = sc.nextInt();
            rt[i] = bt[i]; // Copy burst to remaining
        }

        int completed = 0, time = 0;
        int shortest = -1;
        boolean found;

        while (completed < n) {
            int minTime = Integer.MAX_VALUE;
            found = false;

            // Find the process with the shortest remaining time
            for (int i = 0; i < n; i++) {
                if (at[i] <= time && rt[i] > 0 && rt[i] < minTime) {
                    minTime = rt[i];
                    shortest = i;
                    found = true;
                }
            }

            if (!found) {
                time++;
                continue;
            }

            // Run process for 1 unit time
            rt[shortest]--;
            time++;

            // If finished
            if (rt[shortest] == 0) {
                completed++;
                tat[shortest] = time - at[shortest];
                wt[shortest] = tat[shortest] - bt[shortest];
            }
        }

        // Output
        float totalWT = 0, totalTAT = 0;
        System.out.println("\nP\tAT\tBT\tWT\tTAT");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + at[i] + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]);
            totalWT += wt[i];
            totalTAT += tat[i];
        }

        System.out.printf("\nAverage Waiting Time: %.2f\n", totalWT / n);
        System.out.printf("Average Turnaround Time: %.2f\n", totalTAT / n);
        sc.close();
    }
}

//sjf

import java.util.*;

public class SJF {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];         
        int[] bt = new int[n];          
        int[] wt = new int[n];         
        int[] tat = new int[n];         

        
        System.out.println("Enter burst times for each process:");
        for (int i = 0; i < n; i++) {
            pid[i] = i + 1;
            System.out.print("Process " + pid[i] + ": ");
            bt[i] = sc.nextInt();
        }

        
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (bt[j] > bt[j + 1]) {
                    // Swap burst time
                    int temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;
                    // Swap process ID
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }

        
        wt[0] = 0; // first process has 0 waiting time
        for (int i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
        }

        for (int i = 0; i < n; i++) {
            tat[i] = wt[i] + bt[i];
        }

        
        System.out.println("\nProcess\tBurst\tWaiting\tTurnaround");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + pid[i] + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]);
        }

        
        float avgWT = 0, avgTAT = 0;
        for (int i = 0; i < n; i++) {
            avgWT += wt[i];
            avgTAT += tat[i];
        }
        System.out.println("\nAverage Waiting Time: " + (avgWT / n));
        System.out.println("Average Turnaround Time: " + (avgTAT / n));

        sc.close();
    }
}
  
//open dir close dir

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <dirent.h>
#include <unistd.h>

int main() {
    
    DIR *dir = opendir(".");
    if (dir == NULL) {
        perror("Directory open failed");
        exit(1);
    }

    struct dirent *entry;
    printf("Listing directory contents:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    closedir(dir);
    printf("Directory closed.\n");

    // File operations: open and close
    int fd = open("test.txt", O_CREAT | O_WRONLY, 0644);
    if (fd < 0) {
        perror("File open failed");
        exit(1);
    }
    printf("File 'test.txt' created successfully.\n");

    close(fd);
    printf("File closed.\n");

    printf("Exiting program...\n");
    exit(0);
}


//get pid


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    pid_t pid;

    printf("Parent Process ID: %d\n", getpid());

    
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } 
    else if (pid == 0) {  // Child process
        printf("Child Process ID: %d\n", getpid());

        // Executing a new program using exec()
        printf("Executing 'ls -l' using exec...\n");
        execl("/bin/ls", "ls", "-l", NULL);
        
        perror("Exec failed"); // This runs only if exec fails
        exit(1);
    } 
    else {  // Parent process
        wait(NULL); // Waiting for child to finish
        printf("Child process completed.\n");
    }

    return 0;
}




pthreads


#include <stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<pthread.h>

int i;
void* print(void* i){
    int* j=(int*)i;
    printf("Thread %d\n",*j);
}
int main() {
    
pthread_t tid[3];
for(i=0;i<3;i++){
    pthread_create(&tid[3],NULL,print,(void*)&i);
    sleep(1);
}
for(i=0;i<3;i++){
    pthread_join(tid[i],NULL);
}
}

fcfs

import java.util.Arrays;
import java.util.Scanner;

class Process {
    String name;
    int arrivalTime;
    int burstTime;
    
    public Process(String name, int arrivalTime, int burstTime) {
        this.name = name;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }
}

public class FCFSScheduler {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of processes: ");
        int n = scanner.nextInt();
        
        Process[] processes = new Process[n];
        
        for (int i = 0; i < n; i++) {
            System.out.print("Enter name, arrival time, and burst time for process " + (i + 1) + ": ");
            String name = scanner.next();
            int arrivalTime = scanner.nextInt();
            int burstTime = scanner.nextInt();
            processes[i] = new Process(name, arrivalTime, burstTime);
        }
        
        scanner.close();
        fcfsScheduling(processes);
    }
    
    public static void fcfsScheduling(Process[] processes) {
        int currentTime = 0;
        int totalProcesses = processes.length;
        int[] completionTimes = new int[totalProcesses];
        int[] waitingTimes = new int[totalProcesses];
        int[] turnaroundTimes = new int[totalProcesses];
        
        // Sort the processes array based on arrival time
        Arrays.sort(processes, (p1, p2) -> p1.arrivalTime - p2.arrivalTime);
        
        for (int i = 0; i < totalProcesses; i++) {
            Process currentProcess = processes[i];
            
            // Calculate waiting time
            waitingTimes[i] = Math.max(0, currentTime - currentProcess.arrivalTime);
            
            // Calculate completion time
            completionTimes[i] = currentTime + currentProcess.burstTime;
            
            // Calculate turnaround time
            turnaroundTimes[i] = completionTimes[i] - currentProcess.arrivalTime;
            
            // Move the current time forward
            currentTime = completionTimes[i];
        }
        
        // Print process details
        System.out.println("Process\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < totalProcesses; i++) {
            Process currentProcess = processes[i];
            System.out.println(currentProcess.name + "\t\t" +
                    currentProcess.arrivalTime + "\t\t" +
                    currentProcess.burstTime + "\t\t" +
                    completionTimes[i] + "\t\t" +
                    waitingTimes[i] + "\t\t" +
                    turnaroundTimes[i]);
        }
    }
}


prodcon

import java.util.concurrent.*;
import java.util.*;

class ProducerConsumer {
    // Shared buffer and semaphores
    static final int BUFFER_SIZE = 5;
    static Queue<Integer> buffer = new LinkedList<>();
    
    static Semaphore empty = new Semaphore(BUFFER_SIZE);  // Tracks empty spaces
    static Semaphore full = new Semaphore(0);             // Tracks full spaces
    static Semaphore mutex = new Semaphore(1);            // For mutual exclusion on buffer

    // Producer thread
    static class Producer extends Thread {
        public void run() {
            try {
                while (true) {
                    int item = (int) (Math.random() * 100); // Random item to produce
                    
                    empty.acquire();  // Wait if buffer is full
                    mutex.acquire();  // Lock buffer

                    buffer.add(item);  // Add item to buffer
                    System.out.println("Produced: " + item);

                    mutex.release();  // Unlock buffer
                    full.release();   // Signal consumer that item is available
                    
                    Thread.sleep(1000); // Simulate production time
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    // Consumer thread
    static class Consumer extends Thread {
        public void run() {
            try {
                while (true) {
                    full.acquire();   // Wait if buffer is empty
                    mutex.acquire();  // Lock buffer

                    int item = buffer.poll();  // Consume item
                    System.out.println("Consumed: " + item);

                    mutex.release();  // Unlock buffer
                    empty.release();  // Signal producer that space is available
                    
                    Thread.sleep(1500); // Simulate consumption time
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    // Main method to start producer and consumer
    public static void main(String[] args) {
        Producer producer = new Producer();
        Consumer consumer = new Consumer();

        producer.start();
        consumer.start();
    }
}


ff

import java.util.Scanner;

public class FirstFitOS {
    public static void firstFit(int[] blockSize, int[] processSize) {
        int n = processSize.length, m = blockSize.length;
        int[] allocation = new int[n];
        
        for (int i = 0; i < n; i++) allocation[i] = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    allocation[i] = j;
                    blockSize[j] -= processSize[i];
                    break;
                }
            }
        }

        System.out.println("Process\tSize\tBlock");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t" + processSize[i] + "\t" + (allocation[i] == -1 ? "Not Allocated" : (allocation[i] + 1)));
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of blocks: ");
        int m = sc.nextInt();
        int[] blockSize = new int[m];
        System.out.println("Enter block sizes: ");
        for (int i = 0; i < m; i++) blockSize[i] = sc.nextInt();

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        int[] processSize = new int[n];
        System.out.println("Enter process sizes: ");
        for (int i = 0; i < n; i++) processSize[i] = sc.nextInt();
        
        firstFit(blockSize, processSize);
        sc.close();
    }
}

bf

import java.util.Scanner;

public class BestFitOS {
    public static void bestFit(int[] blockSize, int[] processSize) {
        int n = processSize.length, m = blockSize.length;
        int[] allocation = new int[n];
        
        for (int i = 0; i < n; i++) allocation[i] = -1;

        for (int i = 0; i < n; i++) {
            int bestIdx = -1;
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                        bestIdx = j;
                    }
                }
            }
            if (bestIdx != -1) {
                allocation[i] = bestIdx;
                blockSize[bestIdx] -= processSize[i];
            }
        }

        System.out.println("Process\tSize\tBlock");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t" + processSize[i] + "\t" + (allocation[i] == -1 ? "Not Allocated" : (allocation[i] + 1)));
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of blocks: ");
        int m = sc.nextInt();
        int[] blockSize = new int[m];
        System.out.println("Enter block sizes: ");
        for (int i = 0; i < m; i++) blockSize[i] = sc.nextInt();

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        int[] processSize = new int[n];
        System.out.println("Enter process sizes: ");
        for (int i = 0; i < n; i++) processSize[i] = sc.nextInt();
        
        bestFit(blockSize, processSize);
        sc.close();
    }
}

wf

import java.util.Scanner;

public class WorstFitOS {
    public static void worstFit(int[] blockSize, int[] processSize) {
        int n = processSize.length, m = blockSize.length;
        int[] allocation = new int[n];
        
        for (int i = 0; i < n; i++) allocation[i] = -1;

        for (int i = 0; i < n; i++) {
            int worstIdx = -1;
            for (int j = 0; j < m; j++) {
                if (blockSize[j] >= processSize[i]) {
                    if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                        worstIdx = j;
                    }
                }
            }
            if (worstIdx != -1) {
                allocation[i] = worstIdx;
                blockSize[worstIdx] -= processSize[i];
            }
        }

        System.out.println("Process\tSize\tBlock");
        for (int i = 0; i < n; i++) {
            System.out.println((i + 1) + "\t" + processSize[i] + "\t" + (allocation[i] == -1 ? "Not Allocated" : (allocation[i] + 1)));
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of blocks: ");
        int m = sc.nextInt();
        int[] blockSize = new int[m];
        System.out.println("Enter block sizes: ");
        for (int i = 0; i < m; i++) blockSize[i] = sc.nextInt();

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        int[] processSize = new int[n];
        System.out.println("Enter process sizes: ");
        for (int i = 0; i < n; i++) processSize[i] = sc.nextInt();
        
        worstFit(blockSize, processSize);
        sc.close();
    }
}

//sjf preemptive

import java.util.Scanner;

class SJF_Preemptive {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] pid = new int[n];    // Process IDs
        int[] at = new int[n];     // Arrival Time
        int[] bt = new int[n];     // Burst Time
        int[] ct = new int[n];     // Completion Time
        int[] wt = new int[n];     // Waiting Time
        int[] tat = new int[n];    // Turnaround Time
        int[] remainingBt = new int[n]; // Remaining burst time

        // Input process details
        System.out.println("Enter Arrival Time and Burst Time for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("Process " + (i + 1) + " Arrival Time: ");
            at[i] = sc.nextInt();
            System.out.print("Process " + (i + 1) + " Burst Time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
            remainingBt[i] = bt[i];
        }

        int completed = 0, currentTime = 0, minBt = Integer.MAX_VALUE, shortest = -1;
        boolean check = false;

        // Process execution
        while (completed < n) {
            for (int i = 0; i < n; i++) {
                if (at[i] <= currentTime && remainingBt[i] > 0 && remainingBt[i] < minBt) {
                    minBt = remainingBt[i];
                    shortest = i;
                    check = true;
                }
            }

            if (!check) {
                currentTime++;
                continue;
            }

            remainingBt[shortest]--;
            minBt = remainingBt[shortest];

            if (minBt == 0) {
                minBt = Integer.MAX_VALUE;
                completed++;
                ct[shortest] = currentTime + 1;
                tat[shortest] = ct[shortest] - at[shortest]; // TAT = Completion - Arrival
                wt[shortest] = tat[shortest] - bt[shortest]; // WT = TAT - Burst
            }

            currentTime++;
            check = false;
        }

        // Calculate averages
        float avgWT = 0, avgTAT = 0;
        for (int i = 0; i < n; i++) {
            avgWT += wt[i];
            avgTAT += tat[i];
        }
        avgWT /= n;
        avgTAT /= n;

        // Display results
        System.out.println("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t\t" + at[i] + "\t\t" + bt[i] + "\t\t" + wt[i] + "\t\t" + tat[i]);
        }

        System.out.println("\nAverage Waiting Time: " + avgWT);
        System.out.println("Average Turnaround Time: " + avgTAT);

        sc.close();
    }
}
Enter the number of processes: 3
Enter Arrival Time and Burst Time for each process:
Process 1 Arrival Time: 0
Process 1 Burst Time: 8
Process 2 Arrival Time: 1
Process 2 Burst Time: 4
Process 3 Arrival Time: 2
Process 3 Burst Time: 2

Process   Arrival Time   Burst Time   Waiting Time   Turnaround Time
1              0              8              7                  15
2              1              4              1                   5
3              2              2              0                   2

Average Waiting Time: 2.67
Average Turnaround Time: 7.33



//dining

import java.util.concurrent.Semaphore;

class Philosopher extends Thread {
    int id;
    Semaphore left, right;

    Philosopher(int id, Semaphore left, Semaphore right) {
        this.id = id;
        this.left = left;
        this.right = right;
    }

    public void run() {
        try {
            while (true) {
                System.out.println("Philosopher " + id + " is thinking...");
                Thread.sleep((int) (Math.random() * 1000));

                if (id % 2 == 0) {
                    left.acquire(); right.acquire();
                } else {
                    right.acquire(); left.acquire();
                }

                System.out.println("Philosopher " + id + " is eating...");
                Thread.sleep((int) (Math.random() * 1000));

                left.release(); right.release();
            }
        } catch (InterruptedException e) {
            System.out.println("Philosopher " + id + " was interrupted.");
        }
    }
}

public class DiningPhilosophers {
    public static void main(String[] args) {
        int n = 5;
        Semaphore[] forks = new Semaphore[n];
        for (int i = 0; i < n; i++) forks[i] = new Semaphore(1);
        for (int i = 0; i < n; i++)
            new Philosopher(i, forks[i], forks[(i + 1) % n]).start();
    }
}


program grep

cp: #include <stdio.h>

int main() {
    FILE *src, *dest;
    char ch, srcName[100], destName[100];

    printf("Enter source file: ");
    scanf("%s", srcName);
    printf("Enter destination file: ");
    scanf("%s", destName);

    src = fopen(srcName, "r");
    if (src == NULL) {
        printf("Source file not found.\n");
        return 1;
    }

    dest = fopen(destName, "w");
    while ((ch = fgetc(src)) != EOF)
        fputc(ch, dest);

    printf("File copied successfully.\n");
    fclose(src);
    fclose(dest);
    return 0;
}



program 2


ls: #include <stdio.h>
#include <dirent.h>

int main() {
    struct dirent *de;
    DIR *dr = opendir(".");

    if (dr == NULL) {
        printf("Could not open current directory\n");
        return 1;
    }

    printf("Files in current directory:\n");
    while ((de = readdir(dr)) != NULL)
        printf("%s\n", de->d_name);

    closedir(dr);
    return 0;
}


program 3


grep: #include <stdio.h>
#include <string.h>

int main() {
    char file[100], word[100], line[500];
    FILE *fp;

    printf("Enter file name: ");
    scanf("%s", file);
    printf("Enter word to search: ");
    scanf("%s", word);

    fp = fopen(file, "r");
    if (fp == NULL) {
        printf("File not found.\n");
        return 1;
    }

    printf("Lines containing \"%s\":\n", word);
    while (fgets(line, sizeof(line), fp)) {
        if (strstr(line, word))
            printf("%s", line);
    }

    fclose(fp);
    return 0;
}


// fcfs without arrival

import java.util.Scanner;

public class FCFS {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();

        int[] bt = new int[n]; // Burst time
        int[] wt = new int[n]; // Waiting time
        int[] tat = new int[n]; // Turnaround time

        System.out.println("Enter Burst Time for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("P" + (i + 1) + ": ");
            bt[i] = sc.nextInt();
        }

        wt[0] = 0;
        for (int i = 1; i < n; i++) {
            wt[i] = wt[i - 1] + bt[i - 1];
        }

        for (int i = 0; i < n; i++) {
            tat[i] = wt[i] + bt[i];
        }

        System.out.println("\nProcess\tBT\tWT\tTAT");
        for (int i = 0; i < n; i++) {
            System.out.println("P" + (i + 1) + "\t" + bt[i] + "\t" + wt[i] + "\t" + tat[i]);
        }

        sc.close();
    }
}




